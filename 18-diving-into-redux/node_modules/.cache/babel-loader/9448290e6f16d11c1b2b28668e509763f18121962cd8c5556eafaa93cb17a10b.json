{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n\n// // the 'createStore' version\n// const counterReducer = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       ...state,\n//       counter: state.counter + 1\n//     };\n//   }\n//   if (action.type === \"increase\") {\n//     return {\n//       ...state,\n//       counter: state.counter + action.payload\n//     };\n//   }\n\n//   if (action.type === \"decrement\") {\n//     return {\n//       ...state,\n//       counter: state.counter - 1\n//     };\n//   }\n\n//   if (action.type === \"toggle\") {\n//     return {\n//       ...state,\n//       showCounter: !state.showCounter\n//     };\n//   }\n\n//   return state;\n// };\n\n// const store = createStore(counterSlice.reducer);\n\nvar initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nvar counterSlice = createSlice({\n  name: \"counter\",\n  initialState: initialCounterState,\n  reducers: {\n    // undeclared 'state' and 'action' param will be read by redux\n    // the new state and the old state will be automatically merged\n    increment: function increment(state) {\n      state.counter += 1;\n    },\n    increase: function increase(state, action) {\n      state.counter += action.payload;\n    },\n    decrement: function decrement(state) {\n      state.counter -= 1;\n    },\n    toggleCounter: function toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nexport default counterSlice.reducer;","map":{"version":3,"names":["createSlice","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","increase","action","payload","decrement","toggleCounter","reducer"],"sources":["/home/anne/react/18-diving-into-redux/src/store/counterSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n// // the 'createStore' version\n// const counterReducer = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       ...state,\n//       counter: state.counter + 1\n//     };\n//   }\n//   if (action.type === \"increase\") {\n//     return {\n//       ...state,\n//       counter: state.counter + action.payload\n//     };\n//   }\n\n//   if (action.type === \"decrement\") {\n//     return {\n//       ...state,\n//       counter: state.counter - 1\n//     };\n//   }\n\n//   if (action.type === \"toggle\") {\n//     return {\n//       ...state,\n//       showCounter: !state.showCounter\n//     };\n//   }\n\n//   return state;\n// };\n\n// const store = createStore(counterSlice.reducer);\n\nconst initialCounterState = {\n    counter: 0,\n    showCounter: true\n};\n\nconst counterSlice = createSlice({\n    name: \"counter\",\n    initialState: initialCounterState,\n    reducers: {\n        // undeclared 'state' and 'action' param will be read by redux\n        // the new state and the old state will be automatically merged\n        increment(state) {\n            state.counter += 1;\n        },\n        increase(state, action) {\n            state.counter += action.payload;\n        },\n        decrement(state) {\n            state.counter -= 1;\n        },\n        toggleCounter(state) {\n            state.showCounter = !state.showCounter;\n        }\n    }\n});\n\nexport default counterSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,IAAMC,mBAAmB,GAAG;EACxBC,OAAO,EAAE,CAAC;EACVC,WAAW,EAAE;AACjB,CAAC;AAED,IAAMC,YAAY,GAAGJ,WAAW,CAAC;EAC7BK,IAAI,EAAE,SAAS;EACfC,YAAY,EAAEL,mBAAmB;EACjCM,QAAQ,EAAE;IACN;IACA;IACAC,SAAS,WAAAA,UAACC,KAAK,EAAE;MACbA,KAAK,CAACP,OAAO,IAAI,CAAC;IACtB,CAAC;IACDQ,QAAQ,WAAAA,SAACD,KAAK,EAAEE,MAAM,EAAE;MACpBF,KAAK,CAACP,OAAO,IAAIS,MAAM,CAACC,OAAO;IACnC,CAAC;IACDC,SAAS,WAAAA,UAACJ,KAAK,EAAE;MACbA,KAAK,CAACP,OAAO,IAAI,CAAC;IACtB,CAAC;IACDY,aAAa,WAAAA,cAACL,KAAK,EAAE;MACjBA,KAAK,CAACN,WAAW,GAAG,CAACM,KAAK,CAACN,WAAW;IAC1C;EACJ;AACJ,CAAC,CAAC;AAEF,eAAeC,YAAY,CAACW,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}