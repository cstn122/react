{"ast":null,"code":"import { createStore } from \"redux\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\n\n// // the 'createStore' version\n// const counterReducer = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       ...state,\n//       counter: state.counter + 1\n//     };\n//   }\n//   if (action.type === \"increase\") {\n//     return {\n//       ...state,\n//       counter: state.counter + action.payload\n//     };\n//   }\n\n//   if (action.type === \"decrement\") {\n//     return {\n//       ...state,\n//       counter: state.counter - 1\n//     };\n//   }\n\n//   if (action.type === \"toggle\") {\n//     return {\n//       ...state,\n//       showCounter: !state.showCounter\n//     };\n//   }\n\n//   return state;\n// };\n\n// const store = createStore(counterSlice.reducer);\n\nvar initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nvar counterSlice = createSlice({\n  name: \"counter\",\n  initialState: initialCounterState,\n  reducers: {\n    // undeclared 'state' and 'action' param will be read by redux\n    // the new state and the old state will be automatically merged\n    increment: function increment(state) {\n      state.counter += 1;\n    },\n    increase: function increase(state, action) {\n      state.counter += action.payload;\n    },\n    decrement: function decrement(state) {\n      state.counter -= 1;\n    },\n    toggleCounter: function toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nvar initialAuthState = {\n  isAuthenticated: false\n};\nvar authSlice = createSlice({\n  name: \"authentication\",\n  initialState: initialAuthState,\n  reducers: {\n    login: function login(state) {\n      state.isAuthenticated = true;\n    },\n    logout: function logout(state) {\n      state.isAuthenticated = false;\n    }\n  }\n});\n\n// merging multiple slices\n// multiple slices have only one store\nvar store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport var counterActions = counterSlice.actions; // automatically generates unique identifiers\nexport var authActions = authSlice.actions; // automatically generates unique identifiers\n\nexport default store;","map":{"version":3,"names":["createStore","createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","increase","action","payload","decrement","toggleCounter","initialAuthState","isAuthenticated","authSlice","login","logout","store","reducer","auth","counterActions","actions","authActions"],"sources":["/home/anne/react/18-diving-into-redux/src/store/index.js"],"sourcesContent":["import { createStore } from \"redux\";\r\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\r\n\r\n// // the 'createStore' version\r\n// const counterReducer = (state = initialState, action) => {\r\n//   if (action.type === \"increment\") {\r\n//     return {\r\n//       ...state,\r\n//       counter: state.counter + 1\r\n//     };\r\n//   }\r\n//   if (action.type === \"increase\") {\r\n//     return {\r\n//       ...state,\r\n//       counter: state.counter + action.payload\r\n//     };\r\n//   }\r\n\r\n//   if (action.type === \"decrement\") {\r\n//     return {\r\n//       ...state,\r\n//       counter: state.counter - 1\r\n//     };\r\n//   }\r\n\r\n//   if (action.type === \"toggle\") {\r\n//     return {\r\n//       ...state,\r\n//       showCounter: !state.showCounter\r\n//     };\r\n//   }\r\n\r\n//   return state;\r\n// };\r\n\r\n// const store = createStore(counterSlice.reducer);\r\n\r\nconst initialCounterState = {\r\n  counter: 0,\r\n  showCounter: true\r\n};\r\n\r\nconst counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState: initialCounterState,\r\n  reducers: {\r\n    // undeclared 'state' and 'action' param will be read by redux\r\n    // the new state and the old state will be automatically merged\r\n    increment(state) {\r\n      state.counter += 1;\r\n    },\r\n    increase(state, action) {\r\n      state.counter += action.payload;\r\n    },\r\n    decrement(state) {\r\n      state.counter -= 1;\r\n    },\r\n    toggleCounter(state) {\r\n      state.showCounter = !state.showCounter;\r\n    }\r\n  }\r\n});\r\n\r\n\r\nconst initialAuthState = {\r\n  isAuthenticated: false\r\n};\r\n\r\nconst authSlice = createSlice({\r\n  name: \"authentication\",\r\n  initialState: initialAuthState,\r\n  reducers: {\r\n    login(state) {\r\n      state.isAuthenticated = true;\r\n    },\r\n    logout(state) {\r\n      state.isAuthenticated = false;\r\n    }\r\n  }\r\n});\r\n\r\n// merging multiple slices\r\n// multiple slices have only one store\r\nconst store = configureStore({\r\n  reducer: {\r\n    counter: counterSlice.reducer,\r\n    auth: authSlice.reducer\r\n  }\r\n});\r\n\r\nexport const counterActions = counterSlice.actions; // automatically generates unique identifiers\r\nexport const authActions = authSlice.actions; // automatically generates unique identifiers\r\n\r\nexport default store;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,IAAMC,mBAAmB,GAAG;EAC1BC,OAAO,EAAE,CAAC;EACVC,WAAW,EAAE;AACf,CAAC;AAED,IAAMC,YAAY,GAAGL,WAAW,CAAC;EAC/BM,IAAI,EAAE,SAAS;EACfC,YAAY,EAAEL,mBAAmB;EACjCM,QAAQ,EAAE;IACR;IACA;IACAC,SAAS,WAAAA,UAACC,KAAK,EAAE;MACfA,KAAK,CAACP,OAAO,IAAI,CAAC;IACpB,CAAC;IACDQ,QAAQ,WAAAA,SAACD,KAAK,EAAEE,MAAM,EAAE;MACtBF,KAAK,CAACP,OAAO,IAAIS,MAAM,CAACC,OAAO;IACjC,CAAC;IACDC,SAAS,WAAAA,UAACJ,KAAK,EAAE;MACfA,KAAK,CAACP,OAAO,IAAI,CAAC;IACpB,CAAC;IACDY,aAAa,WAAAA,cAACL,KAAK,EAAE;MACnBA,KAAK,CAACN,WAAW,GAAG,CAACM,KAAK,CAACN,WAAW;IACxC;EACF;AACF,CAAC,CAAC;AAGF,IAAMY,gBAAgB,GAAG;EACvBC,eAAe,EAAE;AACnB,CAAC;AAED,IAAMC,SAAS,GAAGlB,WAAW,CAAC;EAC5BM,IAAI,EAAE,gBAAgB;EACtBC,YAAY,EAAES,gBAAgB;EAC9BR,QAAQ,EAAE;IACRW,KAAK,WAAAA,MAACT,KAAK,EAAE;MACXA,KAAK,CAACO,eAAe,GAAG,IAAI;IAC9B,CAAC;IACDG,MAAM,WAAAA,OAACV,KAAK,EAAE;MACZA,KAAK,CAACO,eAAe,GAAG,KAAK;IAC/B;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA,IAAMI,KAAK,GAAGpB,cAAc,CAAC;EAC3BqB,OAAO,EAAE;IACPnB,OAAO,EAAEE,YAAY,CAACiB,OAAO;IAC7BC,IAAI,EAAEL,SAAS,CAACI;EAClB;AACF,CAAC,CAAC;AAEF,OAAO,IAAME,cAAc,GAAGnB,YAAY,CAACoB,OAAO,CAAC,CAAC;AACpD,OAAO,IAAMC,WAAW,GAAGR,SAAS,CAACO,OAAO,CAAC,CAAC;;AAE9C,eAAeJ,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}