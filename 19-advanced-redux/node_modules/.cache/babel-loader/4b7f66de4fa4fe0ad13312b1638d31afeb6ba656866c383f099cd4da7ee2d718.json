{"ast":null,"code":"import { UISliceActions } from \"./ui-slice\";\nimport { useDispatch } from \"react-redux\";\nimport { CartSliceActions } from \"./cart-slice\";\nexport const fetchCartData = () => {\n  // const dispatch = useDispatch();\n  return async dispatch => {\n    dispatch(UISliceActions.showNotification({\n      status: 'pending',\n      title: 'Fetching...',\n      message: 'Fetching cart data...'\n    }));\n    const fetchData = async () => {\n      const response = await fetch('https://react-http-5a556-default-rtdb.asia-southeast1.firebasedatabase.app/cart.json');\n      if (!response.ok) {\n        throw new Error('Fetching cart data failed');\n      }\n      const data = response.json();\n      return data;\n    };\n    try {\n      const cartData = await fetchData();\n      dispatch(CartSliceActions.replaceCart({\n        // ERROR HANDLING:\n        // if cartData.items is undefined (having an empty cart & Firebase has no 'items' key), \n        // dispatch an empty array instead (which is the same as an empty cart)\n        // ?. stands for optional chaining. \n        // If it's used without ||, replace the key with 'undefined' instead of throwing an error\n        items: (cartData === null || cartData === void 0 ? void 0 : cartData.items) || [],\n        totalQuantity: (cartData === null || cartData === void 0 ? void 0 : cartData.totalQuantity) || 0\n      }));\n    } catch (error) {\n      // fetchCartData().catch(error => {\n      dispatch(UISliceActions.showNotification({\n        status: 'error',\n        title: 'Failed!',\n        message: 'Fetching cart data failed'\n      }));\n      // });\n    }\n  };\n};\n\nexport const sendCartData = cart => {\n  return async dispatch => {\n    dispatch(UISliceActions.showNotification({\n      status: 'pending',\n      title: 'Sending...',\n      message: 'Sending cart data!'\n    }));\n    const sendRequest = async () => {\n      const response = await fetch('https://react-http-5a556-default-rtdb.asia-southeast1.firebasedatabase.app/cart.json', {\n        method: 'PUT',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(cart)\n      });\n      if (!response.ok) {\n        throw new Error('Sending cart data failed');\n      }\n    };\n    try {\n      await sendRequest();\n      dispatch(UISliceActions.showNotification({\n        status: 'success',\n        title: 'Success!',\n        message: 'Sent cart data successfully!'\n      }));\n    } catch (error) {\n      sendCartData().catch(error => {\n        dispatch(UISliceActions.showNotification({\n          status: 'error',\n          title: 'Failed!',\n          message: 'Sending cart data failed'\n        }));\n      });\n    }\n  };\n};","map":{"version":3,"names":["UISliceActions","useDispatch","CartSliceActions","fetchCartData","dispatch","showNotification","status","title","message","fetchData","response","fetch","ok","Error","data","json","cartData","replaceCart","items","totalQuantity","error","sendCartData","cart","sendRequest","method","headers","body","JSON","stringify","catch"],"sources":["/home/anne/react/19-advanced-redux/src/store/cart-actions.js"],"sourcesContent":["import { UISliceActions } from \"./ui-slice\";\nimport { useDispatch } from \"react-redux\";\nimport { CartSliceActions } from \"./cart-slice\";\n\n\nexport const fetchCartData = () => {\n    // const dispatch = useDispatch();\n    return async (dispatch) => {\n        dispatch(\n            UISliceActions.showNotification({\n                status: 'pending',\n                title: 'Fetching...',\n                message: 'Fetching cart data...',\n            })\n        );\n\n        const fetchData = async () => {\n            const response = await fetch('https://react-http-5a556-default-rtdb.asia-southeast1.firebasedatabase.app/cart.json');\n            if (!response.ok) {\n                throw new Error('Fetching cart data failed');\n            }\n            const data = response.json();\n            return data;\n        };\n\n        try {\n            const cartData = await fetchData();\n            dispatch(\n                CartSliceActions.replaceCart({\n                    // ERROR HANDLING:\n                    // if cartData.items is undefined (having an empty cart & Firebase has no 'items' key), \n                    // dispatch an empty array instead (which is the same as an empty cart)\n                    // ?. stands for optional chaining. \n                    // If it's used without ||, replace the key with 'undefined' instead of throwing an error\n                    items: cartData?.items || [],\n                    totalQuantity: cartData?.totalQuantity || 0,\n                })\n            );\n        } catch (error) {\n            // fetchCartData().catch(error => {\n            dispatch(\n                UISliceActions.showNotification({\n                    status: 'error',\n                    title: 'Failed!',\n                    message: 'Fetching cart data failed',\n                })\n            );\n            // });\n        }\n    }\n};\n\n\nexport const sendCartData = (cart) => {\n    return async (dispatch) => {\n        dispatch(\n            UISliceActions.showNotification({\n                status: 'pending',\n                title: 'Sending...',\n                message: 'Sending cart data!',\n            })\n        );\n        const sendRequest = async () => {\n            const response = await fetch('https://react-http-5a556-default-rtdb.asia-southeast1.firebasedatabase.app/cart.json', {\n                method: 'PUT',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify(cart),\n            });\n            if (!response.ok) {\n                throw new Error('Sending cart data failed');\n            }\n        };\n\n        try {\n            await sendRequest();\n            dispatch(\n                UISliceActions.showNotification({\n                    status: 'success',\n                    title: 'Success!',\n                    message: 'Sent cart data successfully!',\n                })\n            );\n        } catch (error) {\n            sendCartData().catch(error => {\n                dispatch(\n                    UISliceActions.showNotification({\n                        status: 'error',\n                        title: 'Failed!',\n                        message: 'Sending cart data failed',\n                    })\n                );\n            });\n        }\n    };\n};\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,YAAY;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,gBAAgB,QAAQ,cAAc;AAG/C,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAC/B;EACA,OAAO,MAAOC,QAAQ,IAAK;IACvBA,QAAQ,CACJJ,cAAc,CAACK,gBAAgB,CAAC;MAC5BC,MAAM,EAAE,SAAS;MACjBC,KAAK,EAAE,aAAa;MACpBC,OAAO,EAAE;IACb,CAAC,CAAC,CACL;IAED,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sFAAsF,CAAC;MACpH,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;MAChD;MACA,MAAMC,IAAI,GAAGJ,QAAQ,CAACK,IAAI,EAAE;MAC5B,OAAOD,IAAI;IACf,CAAC;IAED,IAAI;MACA,MAAME,QAAQ,GAAG,MAAMP,SAAS,EAAE;MAClCL,QAAQ,CACJF,gBAAgB,CAACe,WAAW,CAAC;QACzB;QACA;QACA;QACA;QACA;QACAC,KAAK,EAAE,CAAAF,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEE,KAAK,KAAI,EAAE;QAC5BC,aAAa,EAAE,CAAAH,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEG,aAAa,KAAI;MAC9C,CAAC,CAAC,CACL;IACL,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZ;MACAhB,QAAQ,CACJJ,cAAc,CAACK,gBAAgB,CAAC;QAC5BC,MAAM,EAAE,OAAO;QACfC,KAAK,EAAE,SAAS;QAChBC,OAAO,EAAE;MACb,CAAC,CAAC,CACL;MACD;IACJ;EACJ,CAAC;AACL,CAAC;;AAGD,OAAO,MAAMa,YAAY,GAAIC,IAAI,IAAK;EAClC,OAAO,MAAOlB,QAAQ,IAAK;IACvBA,QAAQ,CACJJ,cAAc,CAACK,gBAAgB,CAAC;MAC5BC,MAAM,EAAE,SAAS;MACjBC,KAAK,EAAE,YAAY;MACnBC,OAAO,EAAE;IACb,CAAC,CAAC,CACL;IACD,MAAMe,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,sFAAsF,EAAE;QACjHa,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI;MAC7B,CAAC,CAAC;MACF,IAAI,CAACZ,QAAQ,CAACE,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;MAC/C;IACJ,CAAC;IAED,IAAI;MACA,MAAMU,WAAW,EAAE;MACnBnB,QAAQ,CACJJ,cAAc,CAACK,gBAAgB,CAAC;QAC5BC,MAAM,EAAE,SAAS;QACjBC,KAAK,EAAE,UAAU;QACjBC,OAAO,EAAE;MACb,CAAC,CAAC,CACL;IACL,CAAC,CAAC,OAAOY,KAAK,EAAE;MACZC,YAAY,EAAE,CAACQ,KAAK,CAACT,KAAK,IAAI;QAC1BhB,QAAQ,CACJJ,cAAc,CAACK,gBAAgB,CAAC;UAC5BC,MAAM,EAAE,OAAO;UACfC,KAAK,EAAE,SAAS;UAChBC,OAAO,EAAE;QACb,CAAC,CAAC,CACL;MACL,CAAC,CAAC;IACN;EACJ,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}