{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { UISliceActions } from \"./ui-slice\";\nconst CartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    totalQuantity: 0\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const existingItem = state.items.find(item => item.id === action.payload.id);\n      state.totalQuantity += 1;\n      if (!existingItem) {\n        state.items.push({\n          name: action.payload.title,\n          id: action.payload.id,\n          price: action.payload.price,\n          quantity: 1,\n          totalPrice: action.payload.price\n        });\n      } else {\n        existingItem.quantity += 1;\n        existingItem.totalPrice += action.payload.price;\n      }\n    },\n    removeItemFromCart(state, action) {\n      const existingItem = state.items.find(item => item.id === action.payload.id);\n      state.totalQuantity -= 1;\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== action.payload.id);\n      } else {\n        existingItem.quantity -= 1;\n        // existingItem.totalPrice -= existingItem.price;\n      }\n    }\n  }\n});\n\nexport const sendCartData = cart => {\n  return async dispatch => {\n    dispatch(UISliceActions.showNotification({\n      status: 'pending',\n      title: 'Sending...',\n      message: 'Sending cart data!'\n    }));\n    const sendRequest = async () => {\n      const response = await fetch('https://react-http-5a556-default-rtdb.asia-southeast1.firebasedatabase.app/cart.json', {\n        method: 'PUT',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(cart)\n      });\n      if (!response.ok) {\n        throw new Error('Sending cart data failed');\n      }\n    };\n    try {\n      await sendRequest();\n      dispatch(UISliceActions.showNotification({\n        status: 'success',\n        title: 'Success!',\n        message: 'Sent cart data successfully!'\n      }));\n    } catch (error) {\n      sendCartData().catch(error => {\n        dispatch(UISliceActions.showNotification({\n          status: 'error',\n          title: 'Failed!',\n          message: 'Sending cart data failed'\n        }));\n      });\n    }\n  };\n};\nexport const CartSliceActions = CartSlice.actions;\nexport default CartSlice;","map":{"version":3,"names":["createSlice","UISliceActions","CartSlice","name","initialState","items","totalQuantity","reducers","addItemToCart","state","action","existingItem","find","item","id","payload","push","title","price","quantity","totalPrice","removeItemFromCart","filter","sendCartData","cart","dispatch","showNotification","status","message","sendRequest","response","fetch","method","headers","body","JSON","stringify","ok","Error","error","catch","CartSliceActions","actions"],"sources":["/home/anne/react/19-advanced-redux/src/store/cart-slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { UISliceActions } from \"./ui-slice\";\n\nconst CartSlice = createSlice({\n    name: 'cart',\n    initialState: {\n        items: [],\n        totalQuantity: 0,\n    },\n    reducers: {\n        addItemToCart(state, action) {\n            const existingItem = state.items.find((item) => item.id === action.payload.id);\n            state.totalQuantity += 1;\n            if (!existingItem) {\n                state.items.push({\n                    name: action.payload.title,\n                    id: action.payload.id,\n                    price: action.payload.price,\n                    quantity: 1,\n                    totalPrice: action.payload.price,\n                });\n            } else {\n                existingItem.quantity += 1;\n                existingItem.totalPrice += action.payload.price;\n            }\n        },\n        removeItemFromCart(state, action) {\n            const existingItem = state.items.find(item => item.id === action.payload.id);\n            state.totalQuantity -= 1;\n            if (existingItem.quantity === 1) {\n                state.items = state.items.filter(item => item.id !== action.payload.id);\n            } else {\n                existingItem.quantity -= 1;\n                // existingItem.totalPrice -= existingItem.price;\n            }\n        },\n    },\n});\n\nexport const sendCartData = (cart) => {\n    return async (dispatch) => {\n        dispatch(\n            UISliceActions.showNotification({\n                status: 'pending',\n                title: 'Sending...',\n                message: 'Sending cart data!',\n            })\n        );\n        const sendRequest = async () => {\n            const response = await fetch('https://react-http-5a556-default-rtdb.asia-southeast1.firebasedatabase.app/cart.json', {\n                method: 'PUT',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify(cart),\n            });\n            if (!response.ok) {\n                throw new Error('Sending cart data failed');\n            }\n        };\n\n        try {\n            await sendRequest();\n            dispatch(\n                UISliceActions.showNotification({\n                    status: 'success',\n                    title: 'Success!',\n                    message: 'Sent cart data successfully!',\n                })\n            );\n        } catch (error) {\n            sendCartData().catch(error => {\n                dispatch(\n                    UISliceActions.showNotification({\n                        status: 'error',\n                        title: 'Failed!',\n                        message: 'Sending cart data failed',\n                    })\n                );\n            });\n        }\n    }\n};\n\nexport const CartSliceActions = CartSlice.actions;\n\nexport default CartSlice;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}